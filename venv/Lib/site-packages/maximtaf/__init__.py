import pdb ## From SQL to DataFrame Pandas
import pandas as pd
import pyodbc  # Connect to MSSQL Server.
import time, os
from datetime import datetime
from dateutil.relativedelta import relativedelta
from re import search

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.select import Select
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import NoSuchElementException

from selenium.webdriver.support.expected_conditions import presence_of_element_located

driver = None
wait = WebDriverWait(driver, 10)

class drivers:
    # def __init__(self):
    #     self.python
    @staticmethod
    def setup(driver_options, driver_path, mobile_emulation, mobile_device, implicitly_wait): # mobile_emulation or mobile_testing
        global driver
        try:
            if driver_options.lower().strip() == 'Chrome'.lower().strip() and not mobile_emulation.lower().strip() == 'Yes'.lower().strip():
                options = webdriver.ChromeOptions()
                # Wait for normal page load
                options.page_load_strategy = 'normal'
                # Disable Chrome is being controled by automated test software
                options.add_experimental_option("useAutomationExtension", False)
                options.add_experimental_option("excludeSwitches", ["enable-automation"])
                # Disable Save Password and Set download directory
                prefs = {"credentials_enable_service": False, "profile.password_manager_enabled": False,
                         "download.default_directory": r"C:\Users\thamarai.selvan\Downloads"}
                options.add_experimental_option("prefs", prefs)
                # Start Chrome Maximized
                options.add_argument('start-maximized')
                # options.add_extension("")
                ## Block pop-up windows
                ##options.setExperimentalOption("excludeSwitches",  Arrays.asList("disable-popup-blocking"))
                # options.add_argument('allow-elevated-browser')
                # options.add_argument("disable-gpu")
                # options.add_argument("headless")
                # options.add_argument("no-default-browser-check")
                # options.add_argument("no-first-run")
                # options.add_argument("no-sandbox")

                # opt.add_argument("--headless")
                # opt.add_argument("--disable-xss-auditor")
                # opt.add_argument("--disable-web-security")
                # opt.add_argument("--allow-running-insecure-content")
                # opt.add_argument("--no-sandbox")
                # opt.add_argument("--disable-setuid-sandbox")
                # opt.add_argument("--disable-webgl")
                # opt.add_argument("--disable-popup-blocking")
                driver = webdriver.Chrome(executable_path=driver_path, options=options)
                driver.implicitly_wait(implicitly_wait)
                # driver.maximize_window()
                # driver.get(base_url)
                print("Chrome Driver SetUp is Completed")

            elif driver_options.lower().strip() == 'Chrome'.lower().strip() and mobile_emulation.lower().strip() == 'Yes'.lower().strip():
                options = webdriver.ChromeOptions()
                # Wait for normal page load
                options.page_load_strategy = 'normal'
                # Disable Chrome is being controled by automated test software
                options.add_experimental_option("useAutomationExtension", False)
                options.add_experimental_option("excludeSwitches", ["enable-automation"])
                # Disable Save Password and Set download directory
                prefs = {"credentials_enable_service": False, "profile.password_manager_enabled": False,
                         "download.default_directory": r"C:\Users\thamarai.selvan\Downloads"}
                options.add_experimental_option("prefs", prefs)
                # Start Chrome Maximized
                # options.add_argument('start-maximized')
                # Mobile Emulation
                device = {"deviceName": mobile_device}
                options.add_experimental_option("mobileEmulation", device)
                mobile_emulation = {"deviceMetrics": {"width": 360, "height": 640,
                                                      "pixelRatio": 3.0}}  # "userAgent": "Mozilla/5.0 (Linux; Android 4.2.1; en-us; Nexus 5 Build/JOP40D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166 Mobile Safari/535.19"}
                driver = webdriver.Chrome(executable_path=driver_path, options=options)
                driver.implicitly_wait(implicitly_wait)
                #driver.get(base_url)
                print("Chrome Driver SetUp is Completed")

            elif driver_options.lower().strip() == 'Edge'.lower().strip():
                options = webdriver.EdgeOptions()
                # Wait for normal page load
                options.page_load_strategy = 'normal'
                options.experimental_options("useAutomationExtension", True)
                options.experimental_options("excludeSwitches", "enable-automation")
                # options.use_chromium = True
                # options.binary_location = r"C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe"
                driver = webdriver.Edge(executable_path=driver_path, options=options)  # , options=options)
                driver.implicitly_wait(implicitly_wait)
                driver.maximize_window()
                # driver.get(base_url)
                print("Edge Driver SetUp is Completed")

            elif driver_options.lower().strip() == 'Firefox'.lower().strip():
                options = webdriver.FirefoxOptions()
                # Wait for normal page load
                options.page_load_strategy = 'normal'
                # Disable Save Password
                options.set_preference("signon.rememberSignons", False)
                # options.set_preference("dom.webnotifications.serviceworker.enabled", False)
                # options.set_preference("dom.webnotifications.enabled", False)
                # dom.webnotifications.enabled
                # dom.webnotifications.serviceworker.enabled # This might void your warranty
                # dom.pushconnection.enabled
                # dom.push.enabled
                driver = webdriver.Firefox(executable_path=driver_path, options=options)
                driver.implicitly_wait(implicitly_wait)
                driver.maximize_window()
                # driver.get(base_url)
                print("Firefox Driver SetUp is Completed")

            elif driver_options.lower().strip() == 'Internet Explorer'.lower().strip() or driver_options.lower().strip() == 'IE'.lower().strip():
                options = webdriver.IeOptions()
                options.page_load_strategy = 'normal'
                driver = webdriver.Ie(executable_path=driver_path,
                                      options=options)  # Ie(executable_path='/path/to/IEDriverServer.exe')
                driver.implicitly_wait(implicitly_wait)
                driver.maximize_window()
                # driver.get(base_url)
                print("Internet Explorer Driver SetUp is Completed")

            elif driver_options.lower().strip() == 'Opera'.lower().strip():
                options = webdriver.opera.options
                driver = webdriver.Opera(executable_path=driver_path)
                driver.implicitly_wait(implicitly_wait)
                driver.maximize_window()
                # driver.get(base_url)
                print('End')

        except Exception as ex:
            print("Exception in Driver : ", str(ex))
            driver = ex

        return driver

    @staticmethod
    def getdriver(self):
        global driver
        return driver

    @staticmethod
    def close():  # To do the cleanup after test has executed.
        global driver
        driver.close()
        driver.quit()

    @staticmethod
    def get_title():
        global driver
        try:
            get_title = str(driver.title).strip()
        except Exception as ex:
            print("Exception in Driver : ", str(ex))
            get_title = ex

    @staticmethod
    def get_current_URL():  # Refresh the current page.
        global driver
        try:
            get_current_URL = driver.current_url
        except Exception as ex:
            print("Exception in Driver : ", str(ex))
            get_current_URL = ex

    @staticmethod
    def navigate_go_back():  # Refresh the current page.
        global driver
        try:
            driver.back()
        except Exception as ex:
            print("Exception in Driver : ", str(ex))
            navigate_go_back = ex

    @staticmethod
    def navigate_forward():  # Refresh the current page.
        global driver
        try:
            driver.forward()
        except Exception as ex:
            print("Exception in Driver : ", str(ex))
            navigate_forward = ex

    @staticmethod
    def refresh_current_page():  # Refresh the current page.
        global driver
        try:
            print(" get_title ")
            driver.navigate().refresh()
        except Exception as ex:
            print("Exception in Driver : ", str(ex))

    @staticmethod
    def explicit_wait():  # Refresh the current page.
        global driver
        try:
            print(" get_title ")
            WebDriverWait(driver).until("dynamic parameter")
            el = WebDriverWait(driver).until(lambda d: d.find_element_by_tag_name("p"))
            # FluentWait
            # Options -- lets review and seperate this functions..
            WebDriverWait(driver, timeout=3).until("some_condition")
            # alert is present
            # element exists
            # element is visible
            # title contains
            # title is
            # element staleness
            # visible text
        except Exception as ex:
            print("Exception in Driver : ", str(ex))

class control:
    # def __init__(self):
    #     self.python

    # 01. Text Box --> OK
    def SetText(by_element, value, reportname):
        '''
            Example : SetText((By.NAME, 'q'), "Maxim", "Search Text")
            Type Contract : :param by_element: element = (By.NAME, 'q')
                            :param value: 'Maxim'
                            :param reportname: 'Search Text'
            Description : Input/Set Text Field With Value.
            :return: Exception
        '''
        global driver
        try:
            if control.IsElementPresent(by_element, '10') and control.IsElementVisible(by_element, '10'):
                element = driver.find_element(*by_element)
                element.clear()
                element.send_keys(str(value).strip())
                # ReportHTMLLog.appendteststeps(reportfilepathame,status,stepname, stepdescription)
                report.ReportHTMLLog("Pass", "Set Text", reportname + " Text Field Set to : " + value)
            else:
                report.ReportHTMLLog("Fail", "Set Text", reportname + " Text Field not Found")
        except Exception as ex:
            report.ReportHTMLLog("Fail", "Exception", reportname + " Exception " + ex)
            # SetText = ex -- Equalent to Return
        # return ex

    # 02 Select --> Check boxes, radio buttons, input elements, and option elements. --> OK
    def Select(by_element, stepname, reportname):  # Returns a boolean value, True or false.
        global driver
        try:
            if control.IsElementPresent(by_element, '60'):
                is_selected = control.IsElementSelected(by_element, '1')
                element = None
                if not is_selected:
                    element = driver.find_element(*by_element)
                    element.click()
                    report.ReportHTMLLog("Pass", stepname,
                                         reportname + " Selected.")  # + str(element.text).strip())# Get the Selected Values..
                else:
                    report.ReportHTMLLog("Pass", stepname,
                                         reportname + " Selected.")  # + str(element.text).strip())
            else:
                report.ReportHTMLLog("Fail", stepname, reportname + " Field not Found")
        except Exception as ex:
            report.ReportHTMLLog("Fail", "Exception", reportname + " Exception " + ex)
            return ex  # -- Equalent to Return
        # return ex

    # 03.RadioButton - Single --> OK
    def SelectRadioButton(by_element, value, reportname):
        global driver
        try:
            control.Select(by_element, "Select Radio Button", reportname + " Radio Button ")
        except Exception as ex:
            report.ReportHTMLLog("Fail", "Exception", reportname + " Exception " + ex)

    # 04.Check Box - Single --> OK
    def SelectCheckBox(by_element, value, reportname):
        global driver
        try:
            control.Select(by_element, "Select CheckBox", reportname + " CheckBox ")
        except Exception as ex:
            report.ReportHTMLLog("Fail", "Exception", reportname + " Exception " + ex)

    # 05. A. List Box By Index --> OK
    def SelectListByIndex(by_element, value, reportname):
        global driver
        try:
            if control.IsElementPresent(by_element, '10'):
                select_object = Select(driver.find_element(*by_element))
                select_object.select_by_index(str(value).strip())
                report.ReportHTMLLog("Pass", "Select List Box Item",
                                     reportname + " List Box Select By Index: " + str(value))
            else:
                report.ReportHTMLLog("Fail", "Select List Box Item ",
                                     reportname + " List Box value " + str(value) + " not found")
        except Exception as ex:
            report.ReportHTMLLog("Fail", "Select List Box Item ",
                                 reportname + " List Box Field not Found")
            # SelectListByIndex = ex -- Equalent to Return

    # 05. B. List Box By Text --> OK
    def SelectListByValue(by_element, value, reportname):
        global driver
        try:
            if control.IsElementPresent(by_element, '10'):
                select_object = Select(driver.find_element(*by_element))
                select_object.select_by_value(value)
                report.ReportHTMLLog("Pass", "Select List Box",
                                     reportname + " List Box Select By Value : " + str(value))
            else:
                report.ReportHTMLLog("Fail", "Select List Box",
                                     reportname + " List Box value " + str(value) + " not found")
        except Exception as ex:
            report.ReportHTMLLog("Fail", "Select List Box", reportname + " List Box Field not Found")
            # SelectListByValue = ex -- Equalent to Return

    # 05. C. List Box By Visible Text --> OK
    def SelectListByVisibleText(by_element, value, reportname):
        global driver
        try:
            if control.IsElementPresent(by_element, '10'):
                select_object = Select(driver.find_element(*by_element))
                select_object.select_by_visible_text(value)
                report.ReportHTMLLog("Pass", "Select List Box",
                                     reportname + " List Box Select By Visible Text : " + str(value))
            else:
                report.ReportHTMLLog("Fail", "Select List Box",
                                     reportname + " List Box value " + str(value) + " not found")
        except Exception as ex:
            report.ReportHTMLLog("Fail", "Select List Box", reportname + " List Box Field not Found")
            # SelectListByValue = ex -- Equalent to Return

    # 06. Click -- link, button  --> OK
    def click(by_element, stepname, reportname):  # **** ClickLink or ClickButton
        global driver
        try:
            if control.IsElementPresent(by_element, '10') and control.IsElementVisible(by_element, '10'):
                element = driver.find_element(*by_element)
                element.click()
                report.ReportHTMLLog("Pass", stepname, reportname + " Clicked")
            else:
                report.ReportHTMLLog("Fail", stepname, reportname + " not Found")
        except Exception as ex:
            report.ReportHTMLLog("Fail", "Exception", reportname + " Exception " + ex)
            return ex

    # 06. A. Click Button  --> OK
    def ClickButton(by_element, reportname):  # **** ClickLink or ClickButton
        global driver
        try:
            control.click(by_element, "Click Button", reportname + " Button ")
        except Exception as ex:  # Not Required
            report.ReportHTMLLog("Fail", "Exception", reportname + " Exception " + ex)
            return ex

    # 06. B. Click Button By Text --> In Progress
    def ClickButtonByText(by_element, buttontext, reportname):  # **** ClickLink or ClickButton
        global driver
        element_present_flag = False
        elements = driver.find_elements(*by_element)
        for element in elements:
            if element.text.lower() == buttontext.lower():
                control.ScrollToElementbyRef(element, reportname)
                control.wait(2)
                control.click(element, "Click Button By Text", reportname + " Button ")
                element_present_flag = True
                return True
            else:
                return False

            if element_present_flag:
                break

    # 06. C. Click Button If Exist --> OK --> Duplicate Functions : we can remove this once review with Team.
    def ClickButtonIfExist(by_element, reportname):  # **** ClickLink or ClickButton
        global driver
        try:
            control.click(by_element, "Click Button", reportname + " Button ")
        except Exception as ex:
            report.ReportHTMLLog("Fail", "Exception", reportname + " Exception " + ex)
            return ex

    # 06. D. Click Link --> OK
    def ClickLink(by_element, reportname):  # **** ClickLink or ClickButton
        global driver
        try:
            control.click(by_element, "Click Link", reportname + " Link ")
        except Exception as ex:  # Not Required
            report.ReportHTMLLog("Fail", "Exception", reportname + " Exception " + ex)
            return ex

    # 07. Click Link By Text --> OK
    def ClickLinkByText(linktext, reportname):  # **** ClickLink or ClickButton
        global driver
        try:
            by_element = (By.LINK_TEXT, linktext)
            if control.IsElementPresent(by_element, '10'):
                element = driver.find_element(*by_element)
                element.click()
                report.ReportHTMLLog("Pass", "Click Link By Text", reportname + " Link Clicked")
            else:
                report.ReportHTMLLog("Fail", "Click Link By Text", reportname + " Link not Found")
        except Exception as ex:
            report.ReportHTMLLog("Fail", "Exception", reportname + " Exception " + ex)
            return ex

    # 08. Click Link By Partial Text --> OK
    def ClickLinkByPartialText(partial_linktext, stepname, reportname):  # **** ClickLink or ClickButton
        global driver
        try:
            by_element = (By.PARTIAL_LINK_TEXT, partial_linktext)
            if control.IsElementPresent(by_element, '10'):
                element = driver.find_element(*by_element)
                element.click()
                report.ReportHTMLLog("Pass", "Click Link By Partial Text", reportname + " Link Clicked")
            else:
                report.ReportHTMLLog("Fail", "Click Link By Partial Text",
                                     reportname + " Link not Found")
        except Exception as ex:
            report.ReportHTMLLog("Fail", "Exception", reportname + " Exception " + ex)
            return ex

    # 09. GetControlValue -- OK
    def GetControlValue(by_element, reportname):
        global driver
        try:
            if control.IsElementPresent(by_element, '60'):
                element = driver.find_element(*by_element)
                report.ReportHTMLLog("Pass", "Get Control Value",
                                     reportname + "  Field " + "Text" + " Value Captured : " + element.text)
                return element.text
            else:
                report.ReportHTMLLog("Fail", "Get Control Value", reportname + " Field not Found")
                return None
        except Exception as ex:
            report.ReportHTMLLog("Fail", "Exception", reportname + " Exception " + ex)

    # 10. Get Control Attribute Value -- OK
    def GetControlAttributeValue(by_element, attributeValue, reportname):
        global driver
        try:
            if control.IsElementPresent(by_element, '60'):
                element = driver.find_element(*by_element)
                element.get_attribute(attributeValue)
                report.ReportHTMLLog("Pass", "Get Control Value",
                                     reportname + "  Field " + "Text" + " Value Captured : " + element.text)
                return element.text
            else:
                report.ReportHTMLLog("Fail", "Get Control Value", reportname + " Field not Found")
                return None
        except Exception as ex:
            report.ReportHTMLLog("Fail", "Exception", reportname + " Exception " + ex)

    # 11. Wait For Element Visible --> In Progress
    def WaitForElementVisible(by_element, timeOutInSeconds, reportname):
        global driver
        try:
            # scrool to and then try is element visible
            element = WebDriverWait(driver, timeOutInSeconds).until(
                expected_conditions.visibility_of_element_located(by_element)) # presenceOfElementLocated or visibility_of_element_located or visibility_of
            return bool(element)
        except Exception as ex:
            return False

    # 12. Wait For Element Presence --> In Progress
    def WaitForElementPresence(by_element, timeOutInSeconds, reportname):
        global driver
        try:
            # scrool to and then try is element visible
            element = WebDriverWait(driver, timeOutInSeconds).until(
                expected_conditions.presence_of_element_located(by_element)) # presenceOfElementLocated or visibility_of_element_located
            return bool(element)
        except Exception as ex:
            return False

    # 13. Check Element Exist By Text --> In Progress
    def CheckElementExistByText(by_element, elementText, reportname):
        global driver
        element_present_flag = False
        elements = driver.find_elements(*by_element)
        for element in elements:
            if element.text.lower() == elementText.lower():
                report.ReportHTMLLog("Pass", "Check Element Exist", reportname + "  Exist")
                element_present_flag = True
                return True
            else:
                report.ReportHTMLLog("Fail", "Check Element Exist", reportname + " dose not Exist")
                return False

            if element_present_flag:
                break

    # 14. Check Element Exist By Partial Text --> In Progress
    def CheckElementExistByPartialText(by_element, elementText, reportname):
        global driver
        element_present_flag = False
        elements = driver.find_elements(*by_element)
        for element in elements:
            if search(elementText.lower(), element.text.lower()): #  substring in fullstring Or fullstring.find(substring) != -1 or fullstring.index(substring)
                report.ReportHTMLLog("Pass", "Check Element Exist", reportname + "  Exist")
                element_present_flag = True
                return True
            else:
                report.ReportHTMLLog("Fail", "Check Element Exist", reportname + " dose not Exist")
                return False

            if element_present_flag:
                break

    # 15. Scroll --> OK
    def Scroll(position):  # -150 PX  - Scroll Up + Scroll Down
        global driver
        try:
            driver.execute_script("window.scrollBy(0, " + position + ");")
            # report.ReportHTMLLog("Pass", "Scroll", position + " PX Scroll")
        except Exception as ex:
            report.ReportHTMLLog("Fail", "Scroll", position + " PX Scroll is Failed")

    # 16. Scroll again to the top of the page
    @staticmethod
    def ScrollToTop():  # -150 PX  - Scroll Up + Scroll Down
        global driver
        try:
            driver.execute_script("window.scroll(0,0);")
            # report.ReportHTMLLog("Pass", "Scroll", position + " PX Scroll")
        except Exception as ex:
            report.ReportHTMLLog("Fail", "Scroll", " Scroll to the top of the page is Failed")

    #17. Scroll to the end of the page
    @staticmethod
    def ScrollToEnd():  # -150 PX  - Scroll Up + Scroll Down
        global driver
        try:
            driver.execute_script("window.scrollBy(0, document.body.scrollHeight);") # scrollBy or scrollTo both are Working
            # report.ReportHTMLLog("Pass", "Scroll", position + " PX Scroll")
        except Exception as ex:
            report.ReportHTMLLog("Fail", "Scroll", " Scroll to the end of the page is Failed")

    # 18. ScrollToElement --> OK
    def ScrollToElement(by_element, reportname):  # moveToElement ---> ScrollToElement
        global driver
        try:
            if control.IsElementPresent(by_element, '10'):
                actions = ActionChains(driver)
                actions.move_to_element(*by_element)
                actions.perform()
                report.ReportHTMLLog("Pass", "Scroll To Element", reportname)
            else:
                report.ReportHTMLLog("Fail", " Scroll To Element ", reportname + " Element not found")
        except Exception as ex:
            report.ReportHTMLLog("Fail", " Scroll To Element - Exception ", " Exception  " + ex)
            # ScrollToElement = ex -- Equalent to Return

    # 19. Scroll To ElementbyRef --> OK
    def ScrollToElementbyRef(by_element, reportname):
        global driver
        try:
            if control.IsElementPresent(by_element, '10'):
                driver.find_element(*by_element).location_once_scrolled_into_view
                driver.execute_script("window.scrollBy(0, '-25');")
                report.ReportHTMLLog("Pass", "Scroll To Element", reportname)
            else:
                report.ReportHTMLLog("Fail", " Scroll To Element ", reportname + " Element not found")
        except Exception as ex:
            report.ReportHTMLLog("Fail", " Scroll To Element - Exception ", " Exception  " + ex)

    # 20. Is Element Present Enabled --> OK
    def IsElementPresent(by_element, timeout_seconds):  # # Returns a boolean value, True or false.
        '''
        :param driver:
        :param by_element:
        :param timeout_seconds:
        :return:
        '''
        global driver
        try:
            element = WebDriverWait(driver, timeout_seconds).until(
                expected_conditions.presence_of_element_located(by_element))
            return bool(element)
        except Exception as ex:
            return False

    # 21. is_visible -- OK
    def IsElementVisible(by_element, timeout_seconds):  # # Returns a boolean value, True or false.
        '''
        :param driver:
        :param by_element:
        :param timeout_seconds:
        :return:
        '''
        global driver
        try:
            # scrool to and then try is element visible
            element = WebDriverWait(driver, timeout_seconds).until(
                expected_conditions.visibility_of_element_located(by_element))
            return bool(element)
        except Exception as ex:
            return False

    # 22. Is Element Clickable -- OK
    def IsElementClickable(by_element, timeout_seconds):  # # Returns a boolean value, True or false.
        '''
        :param driver:
        :param by_element:
        :param timeout_seconds:
        :return:
        '''
        global driver
        try:
            element = WebDriverWait(driver, timeout_seconds).until(
                expected_conditions.element_to_be_clickable(by_element))
            return bool(element)
        except Exception as ex:
            return False

    # 23. Is Element Enabled -- OK
    def IsElementEnabled(by_element, timeout_seconds):  # Returns a boolean value, True or false.
        '''
        :param driver:
        :param by_element:
        :param timeout_seconds:
        :return:
        '''
        global driver
        try:
            element = driver.find_element(*by_element)
            return element.is_enabled()
        except Exception as ex:
            print('IsElementEnabled Exception : ', ex)
            return False

    # 24. Is Element Selected -- OK
    def IsElementSelected(by_element, timeout_seconds):  # Returns a boolean value, True or false.
        global driver
        try:
            element = driver.find_element(*by_element)
            return element.is_selected()
        except Exception as ex:
            return False

    # 25. is_displayed() -- OK
    def IsElementDisplayed(by_element, timeout_seconds):  # Returns a boolean value, True or false.
        '''
        :param driver:
        :param by_element:
        :param timeout_seconds:
        :return:
        '''
        global driver
        try:
            element = driver.find_element(*by_element)
            return element.is_displayed()
        except Exception as ex:
            print('IsElementDisplayed Exception : ', ex)
            return False

    # 26. wait
    def wait(timeout_seconds):  # Returns a boolean value, True or false.
        '''
        :param driver:
        :param by_element:
        :param timeout_seconds:
        :return:
        '''
        time.sleep(timeout_seconds)

class dbutility:
    def __init__(constring, server, database, port, username, password):  # Add Squ Query variable and Query Output variable..
        constring.server = server
        constring.database = database
        constring.port = port
        constring.username = username
        constring.password = password
        # constring.df = None
        constring.conn = None
        # constring.df = None

    def dbconnection_open(constring):
        try:
            constring.conn = pyodbc.connect(
                'Trusted_Connection=no;DRIVER={SQL Server};SERVER=' + constring.server + ';PORT=' + constring.port + ';DATABASE=' + constring.database + ';UID=' + constring.username + ';PWD=' + constring.password)
        except Exception as e:
            print("Exception in dbconnect" + str(e))

    def ReadTCExecDetailsFromDB(constring, appname, tcname):
        try:
            sqlquery = "SELECT [TC_LIST].[TC_EXEC_FLAG],[TC_LIST].[QC_TESTER],[TC_LIST].[QC_TC_EXEC_PATH],[TC_LIST].[QC_TS_NAME] FROM [TC_LIST] INNER JOIN [APPLICATIONS] ON [TC_LIST].APP_ID = [APPLICATIONS].APP_ID Where APP_NAME = '" + appname + "' and [TC_LIST].TC_NAME = '" + tcname + "'";
            dbutility.dbconnection_open(constring)
            df = dbutility.dbconnection_execute(constring, sqlquery)
            tc_execflag = str(df.TC_EXEC_FLAG[0]).strip()
            qc_tester = str(df.QC_TESTER[0]).strip()
            qc_tc_exec_path = str(df.QC_TC_EXEC_PATH[0]).strip()
            qc_ts_name = str(df.QC_TS_NAME[0]).strip()
            return tc_execflag, qc_tester, qc_tc_exec_path, qc_ts_name
        except Exception as e:
            print("Exception in ReadTCExecDetailsFromDB : " + str(e))
        finally:
            dbutility.dbconnection_close(constring)

    def ReadParaValueFromDB(constring, appname, tcname, paraname):
        try:
            sqlquery = "SELECT PARA_VALUE FROM [TC_DATA] INNER JOIN [TC_LIST] ON [TC_DATA].TC_ID = [TC_LIST].TC_ID INNER JOIN [APPLICATIONS] ON [TC_LIST].APP_ID = [APPLICATIONS].APP_ID Where APP_NAME = '" + appname + "' and [TC_LIST].TC_NAME = '" + tcname + "' and [TC_DATA].PARA_NAME = '" + paraname + "'";
            dbutility.dbconnection_open(constring)
            df = dbutility.dbconnection_execute(constring, sqlquery)
            return str(df.PARA_VALUE[0]).strip()
        except Exception as e:
            print("Exception in ReadParaValueFromDB : " + str(e))
        finally:
            dbutility.dbconnection_close(constring)

    def dbconnection_execute(constring, strQuery):
        try:

            # query = "SELECT Employee_Name,Mobile_Phone,Team,Date,Call_SID,Call_STATUS FROM [IT_ON_CALL_STATUS] WHERE [Team] = 'DBATEAM';"
            # query = "SELECT * FROM [dbo].[PY_BODS_CR_POC]"
            df = pd.read_sql(strQuery, constring.conn)
            constring.df = df
            return df
        except Exception as e:
            print("Exception in DBConnect" + str(e))
        finally:
            dbutility.dbconnection_close(constring)

    def dbconnection_insert(constring, data):
        try:
            print('Column Count :', len(data.columns))
            print('Column Name :', data.head())
            cursor = constring.conn.cursor()
            for index, row in data.iterrows():  # or data.index
                cursor.execute(
                    "INSERT INTO [dbo].[PY_BODS_CR_TABLE_POC] ([CR_NUMBER],[PROCESS],[TABLE_NAME],[BATCH_NUMBER],[MODE],[CONFIGURATION_ID],[JOB_STATUS],[CREATED_BY],[CREATED_DATE]) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)",
                    row['CR_NUMBER'], row['PROCESS'], row['Table'], row['Batch'], row['Mode'], row['Configuratio ID'],
                    row['JOB_STATUS'], row['CREATED_BY'],
                    row['CREATED_DATE'])  # , ,[CREATED_DATE], ? ,'convert(varchar,getdate(), 120)'
                constring.conn.commit()
            cursor.close()
            constring.conn.close()
        except Exception as e:
            print("Exception in dbconnection_insert" + str(e))
        finally:
            dbutility.dbconnection_close(constring)

    def dbconnection_update(constring):
        try:
            query = "SELECT Employee_Name,Mobile_Phone,Team,Date,Call_SID,Call_STATUS FROM [IT_ON_CALL_STATUS] WHERE [Team] = 'DBATEAM';"
            df = pd.read_sql(query, constring.conn)
        except Exception as e:
            print("Exception in dbconnect" + str(e))
        finally:
            dbutility.dbconnection_close(constring)

    def dbconnection_close(constring):
        try:
            if bool(constring.conn):
                constring.conn.close()
                # constring.conn.cursor().close()
            # print("Database Connection is closed.")
        except Exception as e:
            print("Exception in dbconnection_close : " + str(e))
        finally:
            constring.conn = None
            df = None
            pd = None

addstepdetails = []
reportfilepath = ''
imagecount = 1
failedstepscount = 0
# reportrootpath = r"D:\Personal\Most Important Projects and Scripts\Python_Web\Reports\\"

class report:
    # def __init__(self):
    #     self.python
    # InitializeReport(strCurrTestName, TC_Description, out strReportFileFolderName, out strReportFolderPath, out  strReportImageFolderPath, out  strReportfilePath);
    @staticmethod
    def InitializeReport(reportrootpath, testcasename, testcasedescription):
        global reportfilepath, driver
        try:
            sdatetime = datetime.now()  # .strftime("%d%m%Y_%H%M%S")
            timestamp = sdatetime.strftime("%d%m%Y_%H%M%S")
            testcasefile = testcasename  # + '_' + sdatetime.strftime("%d%m%Y_%H%M%S") # , buffering=''
            # print("Test Case File Name : ", testcasefile)

            reportfilefoldername = testcasename + "_" + timestamp
            reportfilefolderpath = reportrootpath + f"\{reportfilefoldername}"
            reportimagefolderpath = reportfilefolderpath + r"\Images"
            reportfilepath = reportfilefolderpath + f"\{testcasename}" + ".html"
            # reportfilepath.append(reportfilefolderpath + f"\{testcasename}" + ".html")
            # reportfilepath.append(1)
            # print("reportfilefoldername : ", reportfilefoldername)
            # print("reportfilefolderpath : ", reportfilefolderpath)
            # print("reportimagefolderpath : ", reportimagefolderpath)
            # print("reportfilepath : ", reportfilepath)

            # Create Test Case Folder and Images Folder
            report.createfolder(reportfilefolderpath)
            report.createfolder(reportimagefolderpath)

            f = open(reportfilepath, mode='w')  # For Create W to append a or use r+ TestHtml

            # starttime = sdatetime.strftime("%d-%m-%Y %H:%M:%S")
            starttime = datetime.strptime(str(sdatetime.strftime("%d-%m-%Y %H:%M:%S.%f")), '%d-%m-%Y %H:%M:%S.%f')
            # print("Start Time : ", starttime)
            time.sleep(5)
            # endtime = datetime.now().strftime("%d-%m-%Y %H:%M:%S")
            endtime = datetime.strptime(str(datetime.now().strftime("%d-%m-%Y %H:%M:%S.%f")), '%d-%m-%Y %H:%M:%S.%f')
            # print("End Time : ", endtime)
            totaltime = relativedelta(endtime, starttime)
            testtimetaken = str(totaltime.hours).strip() + 'h ' + str(totaltime.minutes).strip() + 'm ' + str(
                totaltime.seconds).strip() + 's+' + str(totaltime.microseconds).strip() + 'ms'
            # print("Total Time : ", testtimetaken)
            overallstatus = "<span class=\"test-status right label capitalize outline pass\">pass</span>"
            addstepdetails = '{addstepdetails}'
            message = f"""<!DOCTYPE html>
                    <html>
                    <head>
                        <meta charset="UTF-8">
                        <title> {testcasename} </title>            
                        <link href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,600" rel="stylesheet" type="text/css">
                        <link href="https://cdn.rawgit.com/anshooarora/extentreports/97fc3fe7f55cba86a4f5b6ff9a2bb80de3e4867c/cdn/extent.css" type="text/css" rel="stylesheet">
                    </head>
                    <body class="extent standard hide-overflow">
                        <!-- nav -->
                        <nav>
                            <div class="logo-container">
                                <a class="logo-content" > <!-- href="https://www-stg.maximintegrated.com" --> 
                                    <span>TFA Framework</span>
                                    <!-- <img src="https://www-stg.maximintegrated.com/etc/designs/maximintegrated/_images/layout/maxim-logo-web.svg" alt="Maxim Integrated"> -->
                                </a>
                                <a href="#" data-activates="slide-out" class="button-collapse hide-on-large-only">
                                    <i class="mdi-navigation-apps"></i>
                                </a>
                            </div>

                            <span class="report-name">Test Automation Report</span> <span class="report-headline"></span>

                            <!-- navright -->
                            <ul class="right hide-on-med-and-down nav-right">
                                <li class="theme-selector" alt="Click to toggle dark theme." title="Click to toggle dark theme.">
                                    <i class="mdi-hardware-desktop-windows"></i>
                                </li>
                                <li>
                                    <span class="suite-started-time">{sdatetime.strftime("%d-%m-%Y %H:%M:%S")}</span>
                                </li>
                            </ul>
                            <!-- /navright -->
                        </nav>
                        <!-- /nav -->

                        <!-- In Progress -->

                        <div class="container">
                            <!-- tests -->
                            <div id="test-view" class="row _addedTable">

                                <div class="col _addedCell1" style="resize: horizontal; height: 336px;">
                                    <div class="contents" style="height: 321px;">

                                        <div class="card-panel heading">
                                            <h5>Tests</h5>
                                        </div>

                                        <div class="card-panel filters">
                                            <div>
                                                <a data-activates="tests-toggle" data-constrainwidth="true" data-beloworigin="true" data-hover="true" href="#" class="dropdown-button button tests-toggle">
                                                    <i class="mdi-action-subject icon"></i>
                                                </a>
                                                <ul id="tests-toggle" class="dropdown-content">
                                                    <li class="pass"><a href="#!">Pass</a></li>
                                                    <li class="fail"><a href="#!">Fail</a></li>
                                                    <li class="skip"><a href="#!">Skip</a></li>
                                                    <li class="divider"></li>
                                                    <li class="clear"><a href="#!">Clear Filters</a></li>
                                                </ul>
                                            </div>
                                            <div>
                                                <a id="clear-filters" alt="Clear Filters" title="Clear Filters"><i class="mdi-navigation-close icon"></i></a>
                                            </div>
                                            <div>&nbsp;-&nbsp;</div> <!-- <div>&nbsp;.&nbsp;</div> -->
                                            <div>
                                                <a id="enableDashboard" alt="Enable Dashboard" title="Enable Dashboard"><i class="mdi-action-track-changes icon"></i></a>
                                            </div>
                                            <div>
                                                <a id="refreshCharts" alt="Refresh Charts on Filters" title="Refresh Charts on Filters" class="enabled"><i class="mdi-navigation-refresh icon active"></i></a>
                                            </div>
                                            <div>&nbsp;-</div> <!-- <div>&nbsp;.</div> -->
                                            <div class="search" alt="Search Tests" title="Search Tests">
                                                <div class="input-field left">
                                                    <input id="searchTests" type="text" class="validate" placeholder="Search Tests...">
                                                </div>
                                                <i class="mdi-action-search icon"></i>
                                            </div>
                                        </div>

                                        <div class="card-panel no-padding-h no-padding-v">

                                            <div class="wrapper">
                                                <ul id="test-collection" class="test-collection">
                                                    <li class="collection-item test displayed pass active">            
                                                        <div class="test-head">
                                                            <span class="test-name">{testcasename}</span>
                                                            {overallstatus}
                                                            <span class="category-assigned hide "></span>
                                                        </div>                                                    
                                                        <div class="test-body">            
                                                            <div class="test-info">
                                                                <span title="Test started time" alt="Test started time" class="test-started-time label green lighten-2 text-white">{starttime.strftime("%d-%m-%Y %H:%M:%S")}</span> <!-- 2020-02-13 13:00:12 -->
                                                                <span title="Test ended time" alt="Test ended time" class="test-ended-time label red lighten-2 text-white">{endtime.strftime("%d-%m-%Y %H:%M:%S")}</span> <!-- 2020-02-13 13:00:12 -->
                                                                <span title="Time taken to finish" alt="Time taken to finish" class="test-time-taken label blue-grey lighten-3 text-white">{testtimetaken}</span> <!-- 0h 0m 28s+315ms -->
                                                            </div>                                                        
                                                            <div class="test-desc">{testcasedescription}</div>
                                                            <div class="test-attributes"></div> 
                                                            <div class="test-steps">
                                                                <table class="bordered table-results">
                                                                    <thead>
                                                                    <tr>
                                                                        <th>Status</th>
                                                                        <th>Timestamp</th>
                                                                        <th>StepName</th>
                                                                        <th>Details</th>
                                                                    </tr>
                                                                    </thead>
                                                                    <tbody>
                                                                    <!-- Dynamic Para addstepdetails -->
                                                                    {addstepdetails}
                                                                    </tbody>
                                                                </table>
                                                            </div> 
                                                        </div>
                                                    </li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div id="test-details-wrapper" class="col _addedCell2" style="height: 336px; width: 928px;">
                                    <div class="contents" style="height: 321px;">
                                        <div class="card-panel details-view">
                                            <h5 class="details-name">{testcasename} </h5>
                                            <div class="step-filters right">
                                                <span class="info" alt="info" title="info">
                                                    <i class="mdi-action-info-outline"></i>
                                                </span>
                                                <span class="pass" alt="pass" title="pass">
                                                    <i class="mdi-action-check-circle"></i>
                                                </span>
                                                <span class="fail" alt="fail" title="fail">
                                                    <i class="mdi-navigation-cancel"></i>
                                                </span>
                                                <span class="fatal" alt="fatal" title="fatal">
                                                    <i class="mdi-navigation-cancel"></i>
                                                </span>
                                                <span class="error" alt="error" title="error">
                                                    <i class="mdi-alert-error"></i></span>
                                                <span class="warning" alt="warning" title="warning">
                                                    <i class="mdi-alert-warning"></i></span>
                                                <span class="skip" alt="skip" title="skip">
                                                    <i class="mdi-content-redo"></i></span>
                                                <span class="clear-step-filter" alt="Clear filters" title="Clear filters">
                                                    <i class="mdi-content-clear"></i></span>
                                            </div>
                                            <div class="details-container">
                                                <div class="test-body">
                                                    <div class="test-info">
                                                        <span title="Test started time" alt="Test started time" class="test-started-time label green lighten-2 text-white">2020-02-13 13:00:12</span>
                                                        <span title="Test ended time" alt="Test ended time" class="test-ended-time label red lighten-2 text-white">2020-02-13 13:00:40</span>
                                                        <span title="Time taken to finish" alt="Time taken to finish" class="test-time-taken label blue-grey lighten-3 text-white">0h 0m 28s+315ms</span>
                                                    </div>

                                                    <div class="test-desc">Search For Part Num</div>
                                                    <div class="test-attributes"></div>            
                                                    <div class="test-steps">
                                                        <table class="bordered table-results">
                                                            <thead>
                                                            <tr>
                                                                <th>Status</th>
                                                                <th>Timestamp</th>
                                                                <th>StepName</th>
                                                                <th>Details</th>
                                                            </tr>
                                                            </thead>
                                                            <tbody>
                                                            <!-- Dynamic Para addstepdetails-->

                                                            </tbody>
                                                        </table>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- /tests -->            
                            <!-- categories -->
                            <!-- /categories -->
                            <!-- exceptions -->
                            <!-- /exceptions -->
                            <!-- testrunner logs -->
                            <!-- /testrunner logs -->
                        </div>

                        <!-- In Progress -->

                        <!-- modals -->
                        <div id="test-count-setting" class="modal bottom-sheet">
                            <div class="modal-content">
                                <h5>Configure Tests Count Setting</h5>
                                <input name="test-count-setting" type="radio" id="parentWithoutNodes" class="with-gap">
                                <label for="parentWithoutNodes">Parent Tests Only (Does not include child nodes in counts)</label>
                                <br>
                                <input name="test-count-setting" type="radio" id="parentWithoutNodesAndNodes" class="with-gap">
                                <label for="parentWithoutNodesAndNodes">Parent Tests Without Child Tests + Child Tests</label>
                                <br>
                                <input name="test-count-setting" type="radio" id="childNodes" class="with-gap">
                                <label for="childNodes">Child Tests Only</label>
                            </div>
                            <div class="modal-footer">
                                <a href="#!" class="modal-action modal-close waves-effect waves-green btn">Save</a>
                            </div>
                        </div>

                        <div id="step-status-filter" class="modal bottom-sheet">
                            <div class="modal-content">
                                <h5>Select Status</h5>
                                <input checked="" class="filled-in" type="checkbox" id="step-dashboard-filter-pass">
                                <label for="step-dashboard-filter-pass">Pass</label>
                                <br>
                                <input checked="" class="filled-in" type="checkbox" id="step-dashboard-filter-fail">
                                <label for="step-dashboard-filter-fail">Fail</label>
                                <br>
                                <input checked="" class="filled-in" type="checkbox" id="step-dashboard-filter-fatal">
                                <label for="step-dashboard-filter-fatal">Fatal</label>
                                <br>
                                <input checked="" class="filled-in" type="checkbox" id="step-dashboard-filter-error">
                                <label for="step-dashboard-filter-error">Error</label>
                                <br>
                                <input checked="" class="filled-in" type="checkbox" id="step-dashboard-filter-warning">
                                <label for="step-dashboard-filter-warning">Warning</label>
                                <br>
                                <input checked="" class="filled-in" type="checkbox" id="step-dashboard-filter-skip">
                                <label for="step-dashboard-filter-skip">Skipped</label>
                                <br>
                                <input checked="" class="filled-in" type="checkbox" id="step-dashboard-filter-info">
                                <label for="step-dashboard-filter-info">Info</label>
                                <br>
                                <input checked="" class="filled-in" type="checkbox" id="step-dashboard-filter-unknown">
                                <label for="step-dashboard-filter-unknown">Unknown</label>
                            </div>
                            <div class="modal-footer">
                                <a href="#!" class="modal-action modal-close waves-effect waves-green btn">Save</a>
                            </div>
                        </div>
                        <!-- /modals -->

                        <script src="https://cdn.rawgit.com/anshooarora/extentreports/051be9b627c84bde3591f7e6268e8b70e334a760/cdn/extent.js" type="text/javascript"></script>
                        <!-- Check and remove below Scripts -->
                        <!-- <script>$(document).ready(function() {"('.logo span').html('ExtentReports');"});</script>
                        <script>$(document).ready(function() {""});</script> -->
                        <!-- Check and remove below Scripts -->
                        <div class="hiddendiv common"></div>
                    </body>
                    </html>"""
            f.write(message)
            f.flush()
            f.close()
            # time.sleep(2)
            return reportfilepath, reportimagefolderpath
        except Exception as e:
            print("Exception in create test is : " + str(e))

    @staticmethod
    def ReportHTMLLog(status, stepname, stepdescription): # appendteststeps
        try:
            global reportfilepath, failedstepscount
            # print("ReportHTMLLog Report File Path : " , reportfilepath)
            # Embard in Code : timestamp
            # To Compost Pass, Fail and Info td Tags.
            if status and status.strip() and status.casefold() == 'Pass'.casefold():  # cookie.isspace()
                message = f"""<tr>
                            <td class="status pass"><i class="mdi-action-check-circle"></i></td>
                            <td class="timestamp">{datetime.now().strftime("%H:%M:%S")}</td>                                                                                            
                            <td class="step-name">{stepname}</td>
                            <td class="step-details">{stepdescription}</td>
                       </tr>""" + '\n' + '{addstepdetails}'
                     # </tr>""" + '\n' + '{addstepdetails}' + '\n'
                addstepdetails.append(message)
            elif status and status.strip() and status.casefold() == 'Fail'.casefold():
                message = f"""<tr>
                            <td class="status fail"><i class="mdi-navigation-cancel"></i></td>
                            <td class="timestamp">{datetime.now().strftime("%H:%M:%S")}</td>                                                                                               
                            <td class="step-name"> {stepname} </td>
                            <td class="step-details"> {stepdescription}</td>
                    </tr>""" + '\n' + '{addstepdetails}' + '\n'
                  # </tr>""" + '\n' + '{addstepdetails}' + '\n'
                addstepdetails.append(message)
            elif status and status.strip() and status.casefold() == 'Info'.casefold():
                message = f"""<tr>
                               <td class="status fail"><i class="mdi-navigation-cancel"></i></td>
                               <td class="timestamp">{datetime.now().strftime("%H:%M:%S")}</td>                                                                                                
                               <td class="step-name"> {stepname} </td>
                               <td class="step-details"> {stepdescription}</td>
                       </tr>""" + '\n' + '{addstepdetails}' + '\n'
                     # </tr>""" + '\n' + '{addstepdetails}' + '\n'
                addstepdetails.append(message)

            # To Add Images in Steps :
            # <td class="step-details">Submit Quote<img class="report-img" data-featherlight=".\Images\TC001_1.png" src=".\Images\TC001_1.png"></td>
            # addstepdetails = [] D:\Personal\Most Important Projects and Scripts\Python_Web\HTML_REPORT\TC001_SF_Search_Parts_New\Images\TC001_1.png

            # print("Report File Path in Write Function : ", reportfilepath)

            # read html file from test case name
            fread = open(reportfilepath, mode='r')  # For Create W to append a or use r+ w+ overwrite TestHtml
            # appendmessage = fread.readlines()
            appendmessage = fread.read()
            fread.close()

            # if any("abc" in s for s in some_list):
            if any('<td class="status fail"><i class="mdi-navigation-cancel"></i></td>' in status for status in
                   addstepdetails) and failedstepscount == 0:
                overallstatus = "<span class=\"test-status right label capitalize outline fail\">fail</span>"
                appendmessage = appendmessage.replace(
                    "<span class=\"test-status right label capitalize outline pass\">pass</span>", overallstatus)
                failedstepscount += 1
            elif not any('<td class="status fail"><i class="mdi-navigation-cancel"></i></td>' in status for status in
                         addstepdetails) and failedstepscount == 0:
                # print("All are pass")
                overallstatus = "<span class=\"test-status right label capitalize outline pass\">pass</span>"
            elif failedstepscount > 0:
                failedstepscount += 1
            # overallstatus = "<span class=\"test-status right label capitalize outline pass\">pass</span>" # <span class="test-status right label capitalize outline pass">pass</span>
            # overallstatus = "<span class=\"test-status right label capitalize outline fail\">fail</span>"
            """
            timestamp, step-name, step-details are Common only status pass or status fail will vary. 
            """
            # appendmessage = f.read()
            # i = 0
            # for line in appendmessage:
            #    if line.strip() and line.strip() == '{addstepdetails}'.strip():
            #        print("Line Matched")
            #        appendmessage[i] = message + '\n' + '{addstepdetails}'  + '\n' # '{addstepdetails}'
            #        #f.write(message + '\n{addstepdetails}')
            #    else:
            #        print("Not Matched.")
            #    i += 1

            # {addstepdetails}
            # message = message + '\n{addstepdetails}'
            appendmessage = appendmessage.replace('{addstepdetails}', message)
            # print("HTML File Codes : ", appendmessage)
            # strwrite = " "
            # print("HTML File Codes : ",  strwrite.join(appendmessage))
            f = open(reportfilepath, mode='w')  # For Create W to append a or use r+ w+ overwrite TestHtml
            f.write(appendmessage)
            f.flush()
            f.close()
        except Exception as e:
            print("Exception in appendteststeps is : " + str(e))
        # finally:
        #     print("Append Test Steps Finally Block Executed.")

    @staticmethod
    def CaptureScreenShot(stepdescription, screenshotpath):
        global driver, reportfilepath, imagecount
        pathcount = len(reportfilepath.split('\\')) - 1
        imagename = str(reportfilepath.split('\\')[pathcount].split('_')[0].strip())
        driver.save_screenshot(screenshotpath + "\\" + imagename + "_" + str(imagecount) + ".png")
        # read html file from test case name
        fread = open(reportfilepath, mode='r')  # For Create W to append a or use r+ w+ overwrite TestHtml
        appendmessage = fread.read()
        fread.close()
        message = f"""<tr>
                            <td class="status pass"><i class="mdi-action-check-circle"></i></td>
                            <td class="timestamp">{datetime.now().strftime("%H:%M:%S")}</td>                                                                                            
                            <td class="step-name">Capture Screen</td>
                            <td class="step-details">{stepdescription} <img class="report-img" data-featherlight=".\Images\{imagename + "_" + str(imagecount) + ".png"}" src=".\Images\{imagename + "_" + str(imagecount) + ".png"}"></td>
                       </tr>""" + '\n' + '{addstepdetails}'
                     # </tr>""" + '\n' + '{addstepdetails}' + '\n'
        appendmessage = appendmessage.replace('{addstepdetails}', message)
        f = open(reportfilepath, mode='w')
        f.write(appendmessage)
        f.flush()
        f.close()
        imagecount += 1
        return imagecount

    @staticmethod
    def EndReport():
        global reportfilepath
        # read html file from test case name
        fread = open(reportfilepath, mode='r')  # old value r # For Create W to append a or use r+ w+ overwrite TestHtml
        appendmessage = fread.read()
        fread.close()
        appendmessage = appendmessage.replace('{addstepdetails}', " ")
        f = open(reportfilepath, mode='w') # Old Value W
        f.write(appendmessage)
        f.flush()
        f.close()

    @staticmethod
    def createfolder(reportfolderpath):
        try:
            os.mkdir(reportfolderpath)  # os.rmdir(path) to Delete
        except OSError:
            print("Creation of the directory %s failed" % reportfolderpath)
        # else:
        #     print("Successfully created the directory %s " % reportfolderpath)

    @staticmethod
    def deletefolder(reportfolderpath):
        try:
            os.rmdir(reportfolderpath)
        except OSError:
            print("Deletion of the directory %s failed" % reportfolderpath)
        else:
            print("Successfully deleted the directory %s" % reportfolderpath)